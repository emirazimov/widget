[{"C:\\Emir's folder\\widget\\src\\index.js":"1","C:\\Emir's folder\\widget\\src\\App.js":"2","C:\\Emir's folder\\widget\\src\\reportWebVitals.js":"3","C:\\Emir's folder\\widget\\src\\Redux\\redux-store.js":"4","C:\\Emir's folder\\widget\\src\\Redux\\company-token-reducer.js":"5","C:\\Emir's folder\\widget\\src\\Theme.js":"6","C:\\Emir's folder\\widget\\src\\Redux\\company-profile-reducer.js":"7","C:\\Emir's folder\\widget\\src\\AppStyles.js":"8","C:\\Emir's folder\\widget\\src\\assets\\icons.js":"9","C:\\Emir's folder\\widget\\src\\Redux\\car-reducer.js":"10","C:\\Emir's folder\\widget\\src\\Redux\\form-reducer.js":"11","C:\\Emir's folder\\widget\\src\\Components\\CompanyProfile\\CompanyProfile.js":"12","C:\\Emir's folder\\widget\\src\\Components\\Helpers\\Preloader.js":"13","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\CheckOut.js":"14","C:\\Emir's folder\\widget\\src\\api\\api.js":"15","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\AdressForm.js":"16","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\FleetForm.js":"17","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\Preview.js":"18","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\Payment.js":"19","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\Confirmation.js":"20","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\ReservationFailed.js":"21","C:\\Emir's folder\\widget\\src\\Components\\GoogleMap\\Directions.js":"22","C:\\Emir's folder\\widget\\src\\Components\\TermsOfUse\\TermOfUse.js":"23","C:\\Emir's folder\\widget\\src\\Components\\TermsOfUse\\PrivacyPolicy.js":"24","C:\\Emir's folder\\widget\\src\\Components\\GoogleMap\\mapStyles.js":"25","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\CustomFormInput.js":"26","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\PassengerQuantity.js":"27","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\Hours.js":"28","C:\\Emir's folder\\widget\\src\\Components\\GoogleMap\\GoogleMap.js":"29"},{"size":352,"mtime":1624439710541,"results":"30","hashOfConfig":"31"},{"size":12089,"mtime":1624372972351,"results":"32","hashOfConfig":"31"},{"size":375,"mtime":1624342193186,"results":"33","hashOfConfig":"31"},{"size":717,"mtime":1624342193186,"results":"34","hashOfConfig":"31"},{"size":1008,"mtime":1624342193186,"results":"35","hashOfConfig":"31"},{"size":1627,"mtime":1624342193186,"results":"36","hashOfConfig":"31"},{"size":1827,"mtime":1624342193186,"results":"37","hashOfConfig":"31"},{"size":3506,"mtime":1624439585489,"results":"38","hashOfConfig":"31"},{"size":39813,"mtime":1624444740339,"results":"39","hashOfConfig":"31"},{"size":1682,"mtime":1624342193186,"results":"40","hashOfConfig":"31"},{"size":5191,"mtime":1624342193186,"results":"41","hashOfConfig":"31"},{"size":3558,"mtime":1624342193185,"results":"42","hashOfConfig":"31"},{"size":584,"mtime":1624342193186,"results":"43","hashOfConfig":"31"},{"size":1138,"mtime":1624342193183,"results":"44","hashOfConfig":"31"},{"size":2590,"mtime":1624342193186,"results":"45","hashOfConfig":"31"},{"size":26831,"mtime":1624457499554,"results":"46","hashOfConfig":"31"},{"size":21852,"mtime":1624342193183,"results":"47","hashOfConfig":"31"},{"size":22112,"mtime":1624434978472,"results":"48","hashOfConfig":"31"},{"size":21682,"mtime":1624347745628,"results":"49","hashOfConfig":"31"},{"size":2436,"mtime":1624342193184,"results":"50","hashOfConfig":"31"},{"size":679,"mtime":1624342193185,"results":"51","hashOfConfig":"31"},{"size":2239,"mtime":1624342193186,"results":"52","hashOfConfig":"31"},{"size":14995,"mtime":1624342193186,"results":"53","hashOfConfig":"31"},{"size":6684,"mtime":1624342193186,"results":"54","hashOfConfig":"31"},{"size":3510,"mtime":1624342193186,"results":"55","hashOfConfig":"31"},{"size":3207,"mtime":1624343579524,"results":"56","hashOfConfig":"31"},{"size":2572,"mtime":1624446249102,"results":"57","hashOfConfig":"31"},{"size":2311,"mtime":1624434246609,"results":"58","hashOfConfig":"31"},{"size":12162,"mtime":1624454689444,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eczefj",{"filePath":"62","messages":"63","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Emir's folder\\widget\\src\\index.js",[],"C:\\Emir's folder\\widget\\src\\App.js",["130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"C:\\Emir's folder\\widget\\src\\reportWebVitals.js",[],"C:\\Emir's folder\\widget\\src\\Redux\\redux-store.js",[],["145","146"],"C:\\Emir's folder\\widget\\src\\Redux\\company-token-reducer.js",[],"C:\\Emir's folder\\widget\\src\\Theme.js",["147","148","149"],"C:\\Emir's folder\\widget\\src\\Redux\\company-profile-reducer.js",[],"C:\\Emir's folder\\widget\\src\\AppStyles.js",[],"C:\\Emir's folder\\widget\\src\\assets\\icons.js",["150"],"C:\\Emir's folder\\widget\\src\\Redux\\car-reducer.js",[],"C:\\Emir's folder\\widget\\src\\Redux\\form-reducer.js",["151","152"],"import { formApi } from '../api/api';\r\nimport { toggleIsFetching } from './car-reducer';\r\nimport { isSuccess } from './company-profile-reducer';\r\n\r\nexport const SET_FORM_DATA = './form-reducer/SET_FORM_DATA';\r\nconst SET_NOTE = './form-reducer/SET_NOTE';\r\nconst LOGOUT = './form-reducer/LOGOUT';\r\nconst SET_CAR_ID = './form-reducer/SET_CAR_ID';\r\nconst SET_ORDER_SUM = './form-reducer/SET_ORDER_SUM';\r\nconst SET_PAYMENT_FORM = './form-reducer/SET_PAYMENT_FORM';\r\nconst SET_EXACT_DATE = './form-reducer/SET_EXACT_DATE';\r\nconst SET_EXACT_TIME = './form-reducer/SET_EXACT_TIME';\r\n\r\nlet initialState = {\r\n  orderType: 3,\r\n  bookingType: 0,\r\n  orderSum: 0,\r\n  orderStartDate: '',\r\n  orderStartTime: '',\r\n  passengersQuantity: 0,\r\n  carInfo: {\r\n    id: 0,\r\n  },\r\n  orderAddressDetails: [\r\n    {\r\n      rideCheckPoint: '',\r\n      latitude: 0,\r\n      longitude: 0,\r\n      placeType: 0,\r\n      placeId: '',\r\n    },\r\n    {\r\n      rideCheckPoint: '',\r\n      latitude: 0,\r\n      longitude: 0,\r\n      placeType: 0,\r\n      placeId: '',\r\n    },\r\n  ],\r\n  orderNotes: '',\r\n  hours: 0,\r\n  paymentInfo: {\r\n    cardNumber: '',\r\n    month: null,\r\n    year: null,\r\n    cvc: '',\r\n    amount: 0,\r\n  },\r\n  client: {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phoneNumber: '',\r\n    address: '',\r\n    zip: '',\r\n    cityId: 0,\r\n    stateId: 0,\r\n  },\r\n  greetClientInfo: {\r\n    id: 0,\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phoneNumber: '',\r\n  },\r\n  isAirportPickupIncluded: false,\r\n  flightNumber: '',\r\n  airlines: {\r\n    id: 0,\r\n  },\r\n};\r\n\r\nconst formReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FORM_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.dataForm,\r\n      };\r\n    // case SET_EXACT_DATE:\r\n    //   return {\r\n    //     ...state,\r\n    //     orderStartDate: action.date,\r\n    //   };\r\n    // case SET_EXACT_TIME:\r\n    //   return {\r\n    //     ...state,\r\n    //     orderStartTime: action.time,\r\n    //   };\r\n    case SET_NOTE:\r\n      return {\r\n        ...state,\r\n        orderNotes: action.note,\r\n      };\r\n    case SET_CAR_ID:\r\n      return {\r\n        ...state,\r\n        carInfo: { id: action.id },\r\n      };\r\n    case SET_ORDER_SUM:\r\n      return {\r\n        ...state,\r\n        orderSum: action.sum,\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        orderType: 3,\r\n        bookingType: 0,\r\n        orderSum: 0,\r\n        orderStartDate: '',\r\n        orderStartTime: '',\r\n        passengersQuantity: 0,\r\n        carInfo: {\r\n          id: 0,\r\n        },\r\n        orderAddressDetails: [\r\n          {\r\n            rideCheckPoint: '',\r\n            latitude: 0,\r\n            longitude: 0,\r\n            placeType: 0,\r\n            placeId: '',\r\n          },\r\n          {\r\n            rideCheckPoint: '',\r\n            latitude: 0,\r\n            longitude: 0,\r\n            placeType: 0,\r\n            placeId: '',\r\n          },\r\n        ],\r\n        orderNotes: '',\r\n        hours: 0,\r\n        paymentInfo: {\r\n          cardNumber: '',\r\n          month: null,\r\n          year: null,\r\n          cvc: '',\r\n          amount: 0,\r\n        },\r\n        client: {\r\n          firstName: '',\r\n          lastName: '',\r\n          email: '',\r\n          phoneNumber: '',\r\n          address: '',\r\n          zip: '',\r\n          cityId: 0,\r\n          stateId: 0,\r\n        },\r\n        greetClientInfo: {\r\n          id: 0,\r\n          firstName: '',\r\n          lastName: '',\r\n          email: '',\r\n          phoneNumber: '',\r\n        },\r\n        isAirportPickupIncluded: false,\r\n        flightNumber: '',\r\n        airlines: {\r\n          id: 0,\r\n        },\r\n      };\r\n    case SET_PAYMENT_FORM:\r\n      return {\r\n        ...state,\r\n        greetClientInfo: { ...action.form.greetClientInfo },\r\n        paymentInfo: {\r\n          ...action.form.paymentInfo,\r\n          month: action.date[0],\r\n          year: action.date[1],\r\n        },\r\n        client: {\r\n          ...action.form.client,\r\n          cityId: action.cityId,\r\n          stateId: action.stateId,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setFormData = (dataForm) => ({ type: SET_FORM_DATA, dataForm });\r\n\r\n// export const setExactDate = (date) => ({\r\n//   type: SET_EXACT_DATE,\r\n//   date,\r\n// });\r\n// export const setExactTime = (time) => ({\r\n//   type: SET_EXACT_TIME,\r\n//   time,\r\n// });\r\n\r\nexport const logOut = () => ({ type: LOGOUT });\r\n\r\nexport const setNoteRedux = (note) => ({ type: SET_NOTE, note });\r\n\r\nexport const setCarId = (id) => ({ type: SET_CAR_ID, id });\r\n\r\nexport const setOrderSum = (sum) => ({ type: SET_ORDER_SUM, sum });\r\n\r\nexport const setPaymentForm = (form, cityId, stateId, date) => ({\r\n  type: SET_PAYMENT_FORM,\r\n  form,\r\n  cityId,\r\n  stateId,\r\n  date,\r\n});\r\n\r\nexport const createReservation = (formSummary) => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    let response = await formApi.createReservation(formSummary);\r\n    if (response.status === 200) {\r\n      dispatch(isSuccess(true));\r\n    } else {\r\n      dispatch(isSuccess(false));\r\n    }\r\n    dispatch(toggleIsFetching(false));\r\n  };\r\n};\r\n\r\nexport default formReducer;\r\n\r\n// ByDistance = 1,\r\n// ByHour = 2,\r\n// AirportTransfer = 3\r\n","C:\\Emir's folder\\widget\\src\\Components\\CompanyProfile\\CompanyProfile.js",["153","154","155"],"import React, { useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { getCompanyProfile } from \"../../Redux/company-profile-reducer\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { CloseWidgetIcon } from \"../../assets/icons\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport { isMobile } from \"react-device-detect\"\r\nimport { Preloader } from \"../Helpers/Preloader\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  companyContainer: {\r\n    padding: theme.spacing(1.5),\r\n    // position: 'fixed',\r\n  },\r\n  companyLogo: {\r\n    borderRadius: \"100px\",\r\n    width: \"55px\",\r\n    height: \"55px\",\r\n    marginLeft: \"15px\",\r\n    userDrag: \"none\",\r\n    userSelect: \"none\",\r\n    mozUserSelect: \"none\",\r\n    webkitUserDrag: \"none\",\r\n    webkitUserSelect: \"none\",\r\n    msUserSelect: \"none\",\r\n  },\r\n  companyName: {\r\n    fontFamily: \"Roboto\",\r\n    fontWeight: \"700\",\r\n    color: \"white\",\r\n    fontSize: \"24px\",\r\n    textTransform: \"none\",\r\n  },\r\n}))\r\n\r\nconst CompanyProfile = ({\r\n  initializing,\r\n  profile,\r\n  getCompanyProfile,\r\n  handleCloseDialog,\r\n  setExpanded,\r\n  setActiveStep,\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  const jwtToken = localStorage.getItem(\"Authorization\")\r\n\r\n  useEffect(() => {\r\n    if (jwtToken) {\r\n      getCompanyProfile()\r\n    }\r\n  }, [getCompanyProfile, jwtToken])\r\n\r\n  return (\r\n    <>\r\n      {/* {isMobile ? <> <Grid container direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n                className={classes.companyContainer}>\r\n                <Grid item>\r\n                    <img src={profile.companyLogoPath} className={classes.companyLogo} alt='companyLogo' />\r\n                </Grid>\r\n                <Grid item xs={5}>\r\n                    <Typography className={classes.companyName}>{profile.companyName}</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <span style={{ cursor: 'pointer' }} onClick={() => { handleCloseDialog(false); setActiveStep(0) }}>\r\n                        <CloseWidgetIcon />\r\n                    </span>\r\n                </Grid>\r\n            </Grid>\r\n                <Divider orientation='horizontal' variant='fullWidth' />\r\n            </> : */}\r\n      {/* {initializing ? ( */}\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.companyContainer}\r\n      >\r\n        <Grid item>\r\n          <img\r\n            src={profile.companyLogoPath}\r\n            className={classes.companyLogo}\r\n            alt=\"companyLogo\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6} md={8}>\r\n          <Typography className={classes.companyName}>\r\n            {profile.companyName}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <span\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setExpanded(false)\r\n              setActiveStep(0)\r\n            }}\r\n          >\r\n            <CloseWidgetIcon />\r\n          </span>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Divider orientation=\"horizontal\" variant=\"fullWidth\" />\r\n\r\n      {/* ) : (\r\n        <Preloader />\r\n      )} */}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.companyProfile.profile,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getCompanyProfile })(CompanyProfile)\r\n","C:\\Emir's folder\\widget\\src\\Components\\Helpers\\Preloader.js",[],"C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\CheckOut.js",[],"C:\\Emir's folder\\widget\\src\\api\\api.js",[],"C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\AdressForm.js",["156","157","158","159","160","161","162","163","164"],"C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\FleetForm.js",["165","166","167","168"],"import Button from \"@material-ui/core/Button\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport React from \"react\"\r\nimport Carousel from \"react-material-ui-carousel\"\r\nimport { connect } from \"react-redux\"\r\nimport { BackArrowIcon, ForwardArrowIcon } from \"../../../assets/icons\"\r\nimport { Preloader } from \"./../../Helpers/Preloader\"\r\nimport { setCarId } from \"../../../Redux/form-reducer\"\r\nimport { AppBar, useMediaQuery } from \"@material-ui/core\"\r\nimport Box from \"@material-ui/core/Box\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#313159\",\r\n    borderRadius: \"8px\",\r\n    paddingTop: \"15px\",\r\n    paddingLeft: \"0px\",\r\n    paddingBottom: \"0px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  contentContainer: {\r\n    padding: theme.spacing(2),\r\n    height: \"100%\",\r\n    flexWrap: \"nowrap\",\r\n  },\r\n  carContainer: {\r\n    overflowY: \"scroll\",\r\n    overflowX: \"hidden\",\r\n\r\n    \"&::-webkit-scrollbar\": {\r\n      width: \"0.7em\",\r\n    },\r\n    \"&::-webkit-scrollbar-thumb\": {\r\n      backgroundColor: \"#3F3D4A\",\r\n      borderRadius: \"8px\",\r\n    },\r\n    \"&::-webkit-scrollbar-thumb:hover\": {\r\n      background: \"#555\",\r\n    },\r\n  },\r\n  priceBox: {\r\n    backgroundColor: \"#851EDF\",\r\n    padding: theme.spacing(1),\r\n  },\r\n  buttonGroup: {\r\n    // bottom: 0,\r\n    // position: 'absolute',\r\n\r\n    padding: \"10px 0px 0px 0\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  carInfoCont: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      alignItems: \"center\",\r\n      padding: theme.spacing(0),\r\n    },\r\n    margin: \"0px\",\r\n    marginTop: \"-10px\",\r\n    width: \"150px\",\r\n  },\r\n  listRoot: {\r\n    opacity: \"0.7\",\r\n    \"&:hover\": { opacity: \"1\" },\r\n  },\r\n}))\r\n\r\nconst FleetForm = React.memo(({ cars, isFetching, back, next, setCarId }) => {\r\n  const classes = useStyles()\r\n  const [carCard, setCarCard] = React.useState(0)\r\n  const [carModal, setCarModal] = React.useState(null)\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleClickOpen = (id) => {\r\n    setCarModal(id)\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setCarModal(null)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleClick = (id) => {\r\n    setCarCard(id)\r\n  }\r\n\r\n  let result = null\r\n  if (carModal) {\r\n    result = cars.find((cars) => carModal === cars.id)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setCarCard(carCard)\r\n  }, [carCard])\r\n\r\n  const isMobile = useMediaQuery(\"(max-width:650px)\")\r\n\r\n  return (\r\n    <>\r\n      {/* {isFetching ? (\r\n        <Preloader />\r\n      ) : ( */}\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        style={{\r\n          height: isMobile ? \"86%\" : \"90%\",\r\n          paddingTop: isMobile ? \"0px\" : \"0px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          spacing={1}\r\n          className={classes.contentContainer}\r\n        >\r\n          <Grid item>\r\n            {/* <AppBar\r\n              position=\"sticky\"\r\n              color=\" #101020\"\r\n              style={{ top: '100px', bottom: '0' }}\r\n            > */}\r\n            <Typography\r\n              style={{\r\n                fontFamily: \"Roboto\",\r\n                fontWeight: 700,\r\n                color: \"#FFFFFF\",\r\n                fontSize: \"24px\",\r\n                lineHeight: \"36px\",\r\n              }}\r\n            >\r\n              Select vehicle\r\n            </Typography>\r\n            {/* </AppBar> */}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            className={classes.carContainer}\r\n            style={{ paddingBottom: \"20px\" }}\r\n          >\r\n            <Grid container direction=\"column\" spacing={2}>\r\n              {cars.map((car, index) => (\r\n                <Grid item key={`${car.id}${car.name}`}>\r\n                  <ListItem\r\n                    className={classes.root}\r\n                    onClick={() => {\r\n                      handleClick(car.id)\r\n                    }}\r\n                    selected={car.id === carCard}\r\n                    classes={{\r\n                      root: classes.listRoot,\r\n                      selected: classes.listSelected,\r\n                    }}\r\n                    // style={{\r\n                    //   opacity: \"0.5\",\r\n                    //   \"&:hover\": { opacity: \"1\" },\r\n                    // }}\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justify=\"space-around\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid item>\r\n                        <Carousel\r\n                          autoPlay={false}\r\n                          animation=\"slide\"\r\n                          navButtonsProps={{\r\n                            style: {\r\n                              width: \"1em\",\r\n                              height: \"1em\",\r\n                            },\r\n                          }}\r\n                          indicatorIconButtonProps={{\r\n                            style: {\r\n                              \"&:hover\": {\r\n                                \"& $button\": {\r\n                                  backgroundColor: \"#10B7EC\",\r\n                                  filter: \"brightness(120%)\",\r\n                                  opacity: \"0.4\",\r\n                                },\r\n                              },\r\n                              marginTop: \"-80px\",\r\n                              // marginBottom: \"-30px\",\r\n                              color: \"grey\",\r\n                            },\r\n                          }}\r\n                          activeIndicatorIconButtonProps={{\r\n                            style: {\r\n                              color: \"white\",\r\n                              height: \"10px\",\r\n                            },\r\n                          }}\r\n                          indicatorContainerProps={{\r\n                            style: { height: \"0px\" },\r\n                          }}\r\n                        >\r\n                          {car.imageUrls.length !== 0 ? (\r\n                            car.imageUrls.map((url) => (\r\n                              <span\r\n                                key={url.id}\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={() => handleClickOpen(car.id)}\r\n                              >\r\n                                <div\r\n                                  style={{\r\n                                    position: \"absolute\",\r\n                                    width: \"75px\",\r\n                                    height: \"20px\",\r\n                                    backgroundColor: \"#313159\",\r\n                                    borderBottomRightRadius: \"10px\",\r\n                                    fontSize: \"13px\",\r\n                                    paddingLeft: \"12px\",\r\n                                  }}\r\n                                >\r\n                                  or similar\r\n                                </div>\r\n                                <img\r\n                                  src={url.path}\r\n                                  style={{\r\n                                    width: \"150px\",\r\n                                    height: \"120px\",\r\n                                    borderRadius: \"8px\",\r\n                                    cursor: \"zoom-in\",\r\n                                  }}\r\n                                  alt=\"car\"\r\n                                />\r\n                              </span>\r\n                            ))\r\n                          ) : (\r\n                            <>\r\n                              <span\r\n                                style={{\r\n                                  position: \"absolute\",\r\n                                  width: \"75px\",\r\n                                  height: \"20px\",\r\n                                  backgroundColor: \"#313159\",\r\n                                  borderBottomRightRadius: \"10px\",\r\n                                  fontSize: \"13px\",\r\n                                  paddingLeft: \"12px\",\r\n                                }}\r\n                              >\r\n                                or similar\r\n                              </span>\r\n                              <img\r\n                                src={\r\n                                  \"https://fl-1.cdn.flockler.com/embed/not-found.png\"\r\n                                }\r\n                                style={{\r\n                                  width: \"150px\",\r\n                                  height: \"120px\",\r\n                                  borderRadius: \"8px\",\r\n                                }}\r\n                                alt=\"car\"\r\n                              />\r\n                            </>\r\n                          )}\r\n                        </Carousel>\r\n\r\n                        {carModal && (\r\n                          <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                          >\r\n                            <DialogActions>\r\n                              <Carousel\r\n                                autoPlay={false}\r\n                                animation=\"slide\"\r\n                                navButtonsProps={{\r\n                                  style: {\r\n                                    width: \"1em\",\r\n                                    height: \"1em\",\r\n                                  },\r\n                                }}\r\n                                indicatorIconButtonProps={{\r\n                                  style: {\r\n                                    \"&:hover\": {\r\n                                      \"& $button\": {\r\n                                        backgroundColor: \"#10B7EC\",\r\n                                        filter: \"brightness(120%)\",\r\n                                        opacity: \"0.4\",\r\n                                      },\r\n                                    },\r\n                                  },\r\n                                }}\r\n                                activeIndicatorIconButtonProps={{\r\n                                  style: {\r\n                                    color: \"#10B7EC\",\r\n                                  },\r\n                                }}\r\n                                indicatorContainerProps={{\r\n                                  style: {},\r\n                                }}\r\n                              >\r\n                                {carModal &&\r\n                                  result.imageUrls.map((url) => (\r\n                                    <img\r\n                                      src={url.path}\r\n                                      style={{\r\n                                        width: \"600px\",\r\n                                        height: \"400px\",\r\n                                        borderRadius: \"8px\",\r\n                                      }}\r\n                                      alt=\"car\"\r\n                                      key={`${url.id}${url.path}`}\r\n                                    />\r\n                                  ))}\r\n                              </Carousel>\r\n                            </DialogActions>\r\n                          </Dialog>\r\n                        )}\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Grid\r\n                          container\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                          className={classes.carInfoCont}\r\n                        >\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            style={{ fontSize: \"18px\" }}\r\n                          >\r\n                            {car.make} {car.model}\r\n                          </Typography>\r\n\r\n                          {/* <Typography\r\n                            variant='body2'\r\n                            style={{ fontSize: '18px' }}\r\n                          ></Typography> */}\r\n\r\n                          <Grid\r\n                            container\r\n                            justify=\"row\"\r\n                            justify=\"space-between\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                Type\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                              <Box\r\n                                style={{\r\n                                  marginTop: \"13px\",\r\n                                  backgroundColor: \"transparent\",\r\n                                  borderColor: \"#736994\",\r\n                                  borderStyle: \"dashed\",\r\n                                  borderWidth: \"1px\",\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                {car.type}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Grid\r\n                            container\r\n                            justify=\"row\"\r\n                            justify=\"space-between\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                Capacity\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                              <Box\r\n                                style={{\r\n                                  marginTop: \"13px\",\r\n                                  backgroundColor: \"transparent\",\r\n                                  borderColor: \"#736994\",\r\n                                  borderStyle: \"dashed\",\r\n                                  borderWidth: \"1px\",\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                {car.capacity}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Grid container justify=\"row\">\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                Color\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                              <Box\r\n                                style={{\r\n                                  marginTop: \"13px\",\r\n                                  backgroundColor: \"transparent\",\r\n                                  borderColor: \"#736994\",\r\n                                  borderStyle: \"dashed\",\r\n                                  borderWidth: \"1px\",\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                white\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Grid container justify=\"row\">\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"400\",\r\n                                }}\r\n                              >\r\n                                Amount\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                              <Box\r\n                                style={{\r\n                                  marginTop: \"13px\",\r\n                                  backgroundColor: \"transparent\",\r\n                                  borderColor: \"#736994\",\r\n                                  borderStyle: \"dashed\",\r\n                                  borderWidth: \"1px\",\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"white\",\r\n                                  fontSize: \"16px\",\r\n                                  fontWeight: \"500\",\r\n                                }}\r\n                              >\r\n                                ${car.price}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                          {/* <Grid item xs={8}>\r\n                            <Paper className={classes.priceBox}>\r\n                              <Grid container justify=\"center\">\r\n                                <Typography variant=\"body2\">\r\n                                  ${car.price}\r\n                                </Typography>\r\n                              </Grid>\r\n                            </Paper>\r\n                          </Grid> */}\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </ListItem>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n          <AppBar\r\n            position=\"sticky\"\r\n            color=\"primary\"\r\n            className={classes.appBar}\r\n            style={{ top: \"auto\", bottom: \"0\" }}\r\n          >\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              justify=\"center\"\r\n              spacing={1}\r\n              className={classes.buttonGroup}\r\n            >\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  onClick={back}\r\n                  startIcon={<BackArrowIcon />}\r\n                  style={{\r\n                    height: \"50px\",\r\n                    borderRadius: \"8px\",\r\n                    backgroundColor: \"#1B1837\",\r\n                    textTransform: \"none\",\r\n                  }}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  onClick={() => {\r\n                    next()\r\n                    setCarId(carCard)\r\n                  }}\r\n                  color=\"primary\"\r\n                  endIcon={<ForwardArrowIcon />}\r\n                  disabled={carCard ? false : true}\r\n                  style={{\r\n                    height: \"50px\",\r\n                    borderRadius: \"8px\",\r\n                    textTransform: \"none\",\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </AppBar>\r\n        </Grid>\r\n      </Grid>\r\n      {/* )} */}\r\n    </>\r\n  )\r\n})\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cars: state.cars.cars,\r\n    isFetching: state.cars.isFetching,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setCarId })(FleetForm)\r\n","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\Preview.js",["169","170","171","172","173"],"import { useMediaQuery } from \"@material-ui/core\"\r\nimport Box from \"@material-ui/core/Box\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport React from \"react\"\r\nimport Carousel from \"react-material-ui-carousel\"\r\nimport { connect } from \"react-redux\"\r\nimport { BackArrowIcon, ForwardArrowIcon } from \"../../../assets/icons\"\r\nimport { toggleIsFetching } from \"../../../Redux/car-reducer\"\r\nimport { setNoteRedux, setOrderSum } from \"../../../Redux/form-reducer\"\r\nimport Directions from \"../../GoogleMap/Directions\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#191929\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  contentContainer: {\r\n    padding: theme.spacing(2),\r\n    paddingTop: \"8px\",\r\n    paddingBottom: \"8px\",\r\n    overflow: \"visible\",\r\n  },\r\n  carInfoCont: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      alignItems: \"center\",\r\n      padding: theme.spacing(2),\r\n    },\r\n  },\r\n  priceBox: {\r\n    backgroundColor: \"#851EDF\",\r\n    padding: theme.spacing(1),\r\n  },\r\n  notes: {\r\n    height: \"50px\",\r\n    \"& .MuiFormLabel-root\": {\r\n      color: \"white\", // or black\r\n      fontSize: \"16px\",\r\n    },\r\n  },\r\n}))\r\n\r\nconst Preview = ({\r\n  carId,\r\n  cars,\r\n  formData,\r\n  next,\r\n  back,\r\n  setNoteRedux,\r\n  setOrderSum,\r\n}) => {\r\n  const classes = useStyles()\r\n  const selectedCar = cars.find((car) => car.id === carId)\r\n\r\n  const [note, setNote] = React.useState(\"\")\r\n  const [distance, setDistance] = React.useState(0)\r\n\r\n  const sendNote = (note) => {\r\n    setNoteRedux(note)\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setNote(event.target.value)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setNote(formData.orderNotes)\r\n  }, [formData.orderNotes])\r\n\r\n  const isMobile = useMediaQuery(\"(max-width:650px)\")\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={1} className={classes.contentContainer}>\r\n        <Grid item>\r\n          <Typography variant=\"body2\">Preview</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Directions\r\n        destinations={formData.orderAddressDetails}\r\n        setDistance={setDistance}\r\n        style={{ height: \"250px\" }}\r\n      />\r\n      <Grid container justify=\"center\">\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          spacing={2}\r\n          className={classes.contentContainer}\r\n        >\r\n          <Grid item>\r\n            <ListItem className={classes.root}>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <Carousel\r\n                    autoPlay={false}\r\n                    animation=\"slide\"\r\n                    navButtonsProps={{\r\n                      style: {\r\n                        width: \"1em\",\r\n                        height: \"1em\",\r\n                      },\r\n                    }}\r\n                    indicatorIconButtonProps={{\r\n                      style: {\r\n                        \"&:hover\": {\r\n                          \"& $button\": {\r\n                            backgroundColor: \"#10B7EC\",\r\n                            filter: \"brightness(120%)\",\r\n                            opacity: \"0.4\",\r\n                          },\r\n                        },\r\n                        marginTop: \"-80px\",\r\n                        color: \"grey\",\r\n                      },\r\n                    }}\r\n                    activeIndicatorIconButtonProps={{\r\n                      style: {\r\n                        color: \"white\",\r\n                      },\r\n                    }}\r\n                    indicatorContainerProps={{\r\n                      style: { height: \"0px\" },\r\n                    }}\r\n                  >\r\n                    {selectedCar.imageUrls.map((url) => (\r\n                      <>\r\n                        <span\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            width: \"75px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"#313159\",\r\n                            borderBottomRightRadius: \"10px\",\r\n                            borderTopLeftRadius: \"6px\",\r\n                            fontSize: \"13px\",\r\n                            paddingLeft: \"12px\",\r\n                          }}\r\n                        >\r\n                          or similar\r\n                        </span>\r\n                        <img\r\n                          src={url.path}\r\n                          style={{\r\n                            width: \"150px\",\r\n                            height: \"120px\",\r\n                            borderRadius: \"8px\",\r\n                          }}\r\n                          alt=\"car\"\r\n                          key={url.id}\r\n                        />\r\n                      </>\r\n                    ))}\r\n                  </Carousel>\r\n                </Grid>\r\n                <Grid item style={{ width: \"150px\" }}>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    spacing={2}\r\n                    className={classes.carInfoCont}\r\n                  >\r\n                    <Typography variant=\"body2\" style={{ fontSize: \"18px\" }}>\r\n                      {selectedCar.make} {selectedCar.model}\r\n                    </Typography>\r\n\r\n                    {/* <Typography\r\n                            variant='body2'\r\n                            style={{ fontSize: '18px' }}\r\n                          ></Typography> */}\r\n\r\n                    <Grid\r\n                      container\r\n                      justify=\"row\"\r\n                      justify=\"space-between\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          Type\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ flexGrow: 1 }}>\r\n                        <Box\r\n                          style={{\r\n                            marginTop: \"13px\",\r\n                            backgroundColor: \"transparent\",\r\n                            borderColor: \"#736994\",\r\n                            borderStyle: \"dashed\",\r\n                            borderWidth: \"1px\",\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          {selectedCar.type}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      container\r\n                      justify=\"row\"\r\n                      justify=\"space-between\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          Capacity\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ flexGrow: 1 }}>\r\n                        <Box\r\n                          style={{\r\n                            marginTop: \"13px\",\r\n                            backgroundColor: \"transparent\",\r\n                            borderColor: \"#736994\",\r\n                            borderStyle: \"dashed\",\r\n                            borderWidth: \"1px\",\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          {selectedCar.capacity}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container justify=\"row\">\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          Color\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ flexGrow: 1 }}>\r\n                        <Box\r\n                          style={{\r\n                            marginTop: \"13px\",\r\n                            backgroundColor: \"transparent\",\r\n                            borderColor: \"#736994\",\r\n                            borderStyle: \"dashed\",\r\n                            borderWidth: \"1px\",\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          white\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container justify=\"row\">\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"400\",\r\n                          }}\r\n                        >\r\n                          Amount\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ flexGrow: 1 }}>\r\n                        <Box\r\n                          style={{\r\n                            marginTop: \"13px\",\r\n                            backgroundColor: \"transparent\",\r\n                            borderColor: \"#736994\",\r\n                            borderStyle: \"dashed\",\r\n                            borderWidth: \"1px\",\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontSize: \"16px\",\r\n                            fontWeight: \"500\",\r\n                          }}\r\n                        >\r\n                          ${selectedCar.price}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Grid item xs={8}>\r\n                            <Paper className={classes.priceBox}>\r\n                              <Grid container justify=\"center\">\r\n                                <Typography variant=\"body2\">\r\n                                  ${car.price}\r\n                                </Typography>\r\n                              </Grid>\r\n                            </Paper>\r\n                          </Grid> */}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  Date\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  {formData.orderStartDate}\r\n                  {console.log(formData)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  Time\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  {formData.orderStartTime}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  From\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography\r\n                  style={{\r\n                    wordWrap: \"break-word\",\r\n                    color: \"white\",\r\n                    fontSize: \"16px\",\r\n                  }}\r\n                >\r\n                  {formData.orderAddressDetails[0].rideCheckPoint}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  To\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography\r\n                  style={{\r\n                    wordWrap: \"break-word\",\r\n                    color: \"white\",\r\n                    fontSize: \"16px\",\r\n                  }}\r\n                >\r\n                  {\r\n                    formData.orderAddressDetails[\r\n                      formData.orderAddressDetails.length - 1\r\n                    ].rideCheckPoint\r\n                  }\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  Vehicle\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  {selectedCar.type}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  Total distance\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  {distance} miles\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography style={{ color: \"white\", fontSize: \"16px\" }}>\r\n                  Total\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item style={{ flexGrow: 1 }}>\r\n                <Box\r\n                  style={{\r\n                    marginTop: \"13px\",\r\n                    backgroundColor: \"transparent\",\r\n                    borderColor: \"#292742\",\r\n                    borderStyle: \"dashed\",\r\n                    borderWidth: \"1px\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography\r\n                  style={{\r\n                    color: \"white\",\r\n                    fontSize: \"16px\",\r\n                    fontWeight: \"700\",\r\n                  }}\r\n                >{`$${selectedCar.price}`}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              style={{\r\n                backgroundColor: \"#101020\",\r\n                borderRadius: \"8px\",\r\n                marginTop: \"-20px\",\r\n              }}\r\n              label=\"Notes\"\r\n              multiline\r\n              fullWidth\r\n              value={note}\r\n              onChange={handleChange}\r\n              className={classes.notes}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              justify=\"center\"\r\n              spacing={1}\r\n              className={classes.buttonGroup}\r\n            >\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  onClick={back}\r\n                  startIcon={<BackArrowIcon />}\r\n                  style={{\r\n                    height: \"50px\",\r\n                    borderRadius: \"8px\",\r\n                    backgroundColor: \"#1B1837\",\r\n                    textTransform: \"none\",\r\n                  }}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  onClick={() => {\r\n                    next()\r\n                    sendNote(note)\r\n                    setOrderSum(selectedCar.price)\r\n                  }}\r\n                  color=\"primary\"\r\n                  endIcon={<ForwardArrowIcon />}\r\n                  style={{\r\n                    height: \"50px\",\r\n                    borderRadius: \"8px\",\r\n                    textTransform: \"none\",\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cars: state.cars.cars,\r\n    formData: state.formData,\r\n    carId: state.formData.carInfo.id,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  setNoteRedux,\r\n  setOrderSum,\r\n})(Preview)\r\n","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\Payment.js",["174"],"import React, { useState, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { FormProvider, useForm } from \"react-hook-form\"\r\nimport {\r\n  CustomFormInput,\r\n  CustomFormInputForPayment,\r\n  CustomMaskInput,\r\n} from \"./CustomFormInput\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { BackArrowIcon } from \"../../../assets/icons\"\r\nimport { yupResolver } from \"@hookform/resolvers/yup\"\r\nimport * as yup from \"yup\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Checkbox from \"@material-ui/core/Checkbox\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport { Link } from \"@material-ui/core\"\r\nimport { placesApi } from \"../../../api/api\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { setPaymentForm } from \"./../../../Redux/form-reducer\"\r\nimport PrivacyPolicy from \"./../../TermsOfUse/PrivacyPolicy\"\r\nimport TermsOfUse from \"./../../TermsOfUse/TermOfUse\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  contentContainer: {\r\n    padding: theme.spacing(3),\r\n  },\r\n  buttonGroup: {\r\n    paddingTop: theme.spacing(0),\r\n  },\r\n  error: {\r\n    color: \"red\",\r\n    margin: \"0px\",\r\n    paddingTop: \"4px\",\r\n  },\r\n  inputRoot: {\r\n    height: \"40px\",\r\n  },\r\n  inputRootAutocomplete: {\r\n    height: \"40px\",\r\n    background: \"#282836\",\r\n    borderRadius: \"10px\",\r\n    paddingLeft: \"13px\",\r\n    \"&::placeholder\": {\r\n      color: \"white\",\r\n      opacity: \"1\",\r\n      fontSize: \"10px\",\r\n    },\r\n  },\r\n  inputRootAutocompleteCardNumber: {\r\n    height: \"40px\",\r\n    background: \"#282836\",\r\n    borderRadius: \"10px\",\r\n    \"&::placeholder\": {\r\n      color: \"white\",\r\n      opacity: \"1\",\r\n      fontSize: \"10px\",\r\n    },\r\n  },\r\n  inputPlaceholder: {\r\n    height: \"40px\",\r\n    \"&::placeholder\": {\r\n      color: \"white\",\r\n      opacity: \"1\",\r\n      fontSize: \"10px\",\r\n    },\r\n  },\r\n  noBorder: {\r\n    border: \"none\",\r\n    \"&::placeholder\": {\r\n      color: \"white\",\r\n      opacity: \"1\",\r\n      fontSize: \"16px\",\r\n    },\r\n  },\r\n\r\n  // input: {\r\n  //   height: \"40px\",\r\n  // },\r\n}))\r\n\r\nconst SignupSchema = yup.object().shape({\r\n  // greetClientInfo: yup.object().shape({\r\n  //     firstName: yup.string().required('Required'),\r\n  //     phoneNumber: yup.number('Not a number').required('Required'),\r\n  //     lastName: yup.string().required('Required'),\r\n  //     email: yup.string().email('invalid email').required('Required'),\r\n  // }),\r\n  client: yup.object().shape({\r\n    firstName: yup.string().required(\"Required\"),\r\n    lastName: yup.string().required(\"Required\"),\r\n    address: yup.string().required(\"Required\"),\r\n    zip: yup.number().required(\"Required\").typeError(\"Not a number\"),\r\n    email: yup.string().email(\"invalid email\").required(\"Required\"),\r\n    phoneNumber: yup.number().typeError(\"Not a number\").required(\"Required\"),\r\n  }),\r\n  paymentInfo: yup.object().shape({\r\n    cardNumber: yup.string().required(\"Required\"),\r\n    month: yup.string().required(\"Required\"),\r\n    cvc: yup.number().required(\"Required\").typeError(\"Not a number\"),\r\n  }),\r\n})\r\n\r\nconst Payment = ({ next, back, total, formSummary, setPaymentForm }) => {\r\n  const classes = useStyles()\r\n\r\n  const [states, setStates] = useState([])\r\n  const [cities, setCities] = useState([])\r\n  const [statesId, setStatesId] = useState(0)\r\n  const [citiesId, setCitiesId] = useState(0)\r\n  const [checked, setChecked] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let componentMounted = true\r\n    const fetchStates = async () => {\r\n      const data = await placesApi.getStates()\r\n      if (componentMounted) {\r\n        setStates(data)\r\n      }\r\n    }\r\n    fetchStates()\r\n    return () => {\r\n      componentMounted = false\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let componentMounted = true\r\n    const fetchCities = async (id) => {\r\n      const data = await placesApi.getCities(id)\r\n      if (componentMounted) {\r\n        setCities(data)\r\n      }\r\n    }\r\n    statesId ? fetchCities(statesId) : setCities([])\r\n    return () => {\r\n      componentMounted = false\r\n    }\r\n  }, [statesId])\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    ...methods\r\n  } = useForm({\r\n    resolver: yupResolver(SignupSchema),\r\n  })\r\n\r\n  const [riderDetails, setRiderDetails] = React.useState(true)\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data)\r\n    const date = data.paymentInfo.month.split(\"/\")\r\n    setPaymentForm({ ...data }, citiesId, statesId, date)\r\n    next()\r\n  }\r\n\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Grid container justify=\"center\" className={classes.contentContainer}>\r\n          <Grid container direction=\"column\" spacing={2}>\r\n            <Grid item>\r\n              <Typography variant=\"body2\">Payment</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    style={riderDetails ? { color: \"#FFFFFF\" } : null}\r\n                  >\r\n                    Is passenger a cardholder?\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Switch\r\n                    checked={riderDetails}\r\n                    onClick={() => setRiderDetails(!riderDetails)}\r\n                    color=\"primary\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {!riderDetails && (\r\n              <Grid item style={{ paddingBottom: \"20px\" }}>\r\n                <Grid item style={{ paddingBottom: \"13px\" }}>\r\n                  <Typography style={{ color: \"white\" }}>\r\n                    Passenger Detail\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    spacing={2}\r\n                  >\r\n                    <Grid item xs={6}>\r\n                      <CustomFormInputForPayment\r\n                        variant=\"outlined\"\r\n                        name=\"greetClientInfo.firstName\"\r\n                        placeholder=\"First Name\"\r\n                        defaultValue={formSummary.greetClientInfo.firstName}\r\n                        style={{ height: \"40px\" }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <CustomFormInputForPayment\r\n                        variant=\"outlined\"\r\n                        name=\"greetClientInfo.lastName\"\r\n                        defaultValue={formSummary.greetClientInfo.lastName}\r\n                        placeholder=\"Last Name\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    spacing={2}\r\n                  >\r\n                    <Grid item xs={6}>\r\n                      <CustomFormInputForPayment\r\n                        name=\"greetClientInfo.email\"\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Email\"\r\n                        defaultValue={formSummary.greetClientInfo.email}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <CustomFormInputForPayment\r\n                        variant=\"outlined\"\r\n                        name=\"greetClientInfo.phoneNumber\"\r\n                        defaultValue={formSummary.greetClientInfo.phoneNumber}\r\n                        placeholder=\"Phone Number\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n            <Grid item>\r\n              <Grid item style={{ paddingBottom: \"13px\" }}>\r\n                <Typography style={{ color: \"white\" }}>\r\n                  Cardholder Information\r\n                </Typography>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                spacing={2}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <CustomFormInputForPayment\r\n                    variant=\"outlined\"\r\n                    name=\"client.firstName\"\r\n                    defaultValue={formSummary.client.firstName}\r\n                    placeholder=\"First Name\"\r\n                    error={errors.client?.firstName ? true : false}\r\n                  />\r\n                  {errors.client?.firstName && (\r\n                    <p className={classes.error}>\r\n                      {errors.client?.firstName.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <CustomFormInputForPayment\r\n                    variant=\"outlined\"\r\n                    name=\"client.lastName\"\r\n                    defaultValue={formSummary.client.lastName}\r\n                    placeholder=\"Last Name\"\r\n                    error={errors.client?.lastName ? true : false}\r\n                  />\r\n                  {errors.client?.lastName && (\r\n                    <p className={classes.error}>\r\n                      {errors.client?.lastName.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                spacing={2}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <CustomFormInputForPayment\r\n                    name=\"client.email\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Email\"\r\n                    defaultValue={formSummary.client.email}\r\n                    error={errors.client?.email ? true : false}\r\n                  />\r\n                  {errors.client?.email && (\r\n                    <p className={classes.error}>\r\n                      {errors.client?.email.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <CustomFormInputForPayment\r\n                    variant=\"outlined\"\r\n                    name=\"client.phoneNumber\"\r\n                    defaultValue={formSummary.client.phoneNumber}\r\n                    placeholder=\"Phone Number\"\r\n                    error={errors.client?.phoneNumber ? true : false}\r\n                  />\r\n                  {errors.client?.phoneNumber && (\r\n                    <p className={classes.error}>\r\n                      {errors.client?.phoneNumber.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <CustomFormInputForPayment\r\n                name=\"client.address\"\r\n                variant=\"outlined\"\r\n                placeholder=\"Address\"\r\n                defaultValue={formSummary.client.address}\r\n                fullWidth\r\n                error={errors.client?.address ? true : false}\r\n              />\r\n              {errors.client?.address && (\r\n                <p className={classes.error}>\r\n                  {errors.client?.address.message}\r\n                </p>\r\n              )}\r\n            </Grid>\r\n            <Grid item>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={states}\r\n                defaultValue={null}\r\n                autoHighlight\r\n                // style={{ paddingTop: \"40px\" }}\r\n                // InputProps={{\r\n                //   classes: {\r\n                //     input: classes.inputPlaceholder,\r\n                //     root: classes.inputRootAutocomplete,\r\n                //     notchedOutline: classes.noBorder,\r\n                //   },\r\n                // }}\r\n                getOptionLabel={(option) => option.name}\r\n                renderOption={(option) => (\r\n                  <>\r\n                    <span>{option.code}</span>\r\n                    {option.name} ({option.code})\r\n                  </>\r\n                )}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    placeholder=\"State\"\r\n                    // variant=\"outlined\"\r\n                    InputProps={{\r\n                      ...params.InputProps,\r\n                      classes: {\r\n                        root: classes.inputRootAutocomplete,\r\n                        notchedOutline: classes.noBorder,\r\n                        input: classes.input,\r\n                      },\r\n                      disableUnderline: true,\r\n                    }}\r\n                  />\r\n                )}\r\n                onChange={(event, newValue) => {\r\n                  newValue ? setStatesId(newValue.id) : setStatesId(null)\r\n                }}\r\n                name=\"stateId\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                spacing={2}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Autocomplete\r\n                    id=\"combo-box-demo\"\r\n                    options={cities}\r\n                    key={statesId}\r\n                    defaultValue={null}\r\n                    autoHighlight\r\n                    getOptionLabel={(option) => option.name}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        fullWidth\r\n                        placeholder=\"Cities\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          classes: {\r\n                            root: classes.inputRootAutocomplete,\r\n                            notchedOutline: classes.noBorder,\r\n                            input: classes.input,\r\n                          },\r\n                          disableUnderline: true,\r\n                        }}\r\n                      />\r\n                    )}\r\n                    onChange={(event, newValue) => {\r\n                      newValue ? setCitiesId(newValue.id) : setCitiesId(null)\r\n                    }}\r\n                    name=\"cityId\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <CustomFormInputForPayment\r\n                    variant=\"outlined\"\r\n                    name=\"client.zip\"\r\n                    placeholder=\"ZIP\"\r\n                    defaultValue={formSummary.client.zip}\r\n                    error={errors.client?.address ? true : false}\r\n                  />\r\n                  {errors.client?.zip && (\r\n                    <p className={classes.error}>\r\n                      {errors.client?.zip.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>Card information</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CustomMaskInput\r\n                name=\"paymentInfo.cardNumber\"\r\n                mask=\"9999-9999-9999-9999\"\r\n                defaultValue={formSummary.paymentInfo.cardNumber}\r\n              >\r\n                {() => (\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Card number/0000 0000 0000 0000\"\r\n                    fullWidth\r\n                    error={errors.paymentInfo?.cardNumber ? true : false}\r\n                    InputProps={{\r\n                      // ...params.InputProps,\r\n                      classes: {\r\n                        root: classes.inputRootAutocompleteCardNumber,\r\n                        notchedOutline: classes.noBorder,\r\n                        input: classes.input,\r\n                      },\r\n                      disableUnderline: true,\r\n                    }}\r\n                  />\r\n                )}\r\n              </CustomMaskInput>\r\n              {errors.paymentInfo?.cardNumber && (\r\n                <p className={classes.error}>\r\n                  {errors.paymentInfo?.cardNumber.message}\r\n                </p>\r\n              )}\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                spacing={2}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <CustomMaskInput\r\n                    name=\"paymentInfo.month\"\r\n                    mask=\"99/99\"\r\n                    defaultValue={`${formSummary.paymentInfo.month}/${formSummary.paymentInfo.year}`}\r\n                  >\r\n                    {() => (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        placeholder=\"mm/yy\"\r\n                        fullWidth\r\n                        error={errors.paymentInfo?.month ? true : false}\r\n                        InputProps={{\r\n                          // ...params.InputProps,\r\n                          classes: {\r\n                            root: classes.inputRootAutocompleteCardNumber,\r\n                            notchedOutline: classes.noBorder,\r\n                            input: classes.input,\r\n                          },\r\n                          disableUnderline: true,\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </CustomMaskInput>\r\n                  {errors.paymentInfo?.month && (\r\n                    <p className={classes.error}>\r\n                      {errors.paymentInfo?.month.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <CustomMaskInput\r\n                    name=\"paymentInfo.cvc\"\r\n                    type=\"date\"\r\n                    mask=\"999\"\r\n                    defaultValue={formSummary.paymentInfo.cvc}\r\n                  >\r\n                    {() => (\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        placeholder=\"CVV/CVC\"\r\n                        fullWidth\r\n                        error={errors.paymentInfo?.cvc ? true : false}\r\n                        InputProps={{\r\n                          // ...params.InputProps,\r\n                          classes: {\r\n                            root: classes.inputRootAutocompleteCardNumber,\r\n                            notchedOutline: classes.noBorder,\r\n                            input: classes.input,\r\n                          },\r\n                          disableUnderline: true,\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </CustomMaskInput>\r\n                  {errors.paymentInfo?.cvc && (\r\n                    <p className={classes.error}>\r\n                      {errors.paymentInfo?.cvc.message}\r\n                    </p>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Checkbox color=\"default\" onClick={() => setChecked(!checked)} />\r\n              <Link underline=\"always\" style={{ color: \"#BABABA\" }}>\r\n                <TermsOfUse />\r\n              </Link>{\" \"}\r\n              /{\" \"}\r\n              <Link underline=\"always\" style={{ color: \"#BABABA\" }}>\r\n                <PrivacyPolicy />\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                spacing={1}\r\n                className={classes.buttonGroup}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    onClick={back}\r\n                    startIcon={<BackArrowIcon />}\r\n                    style={{\r\n                      height: \"50px\",\r\n                      borderRadius: \"8px\",\r\n                      backgroundColor: \"#1B1837\",\r\n                      textTransform: \"none\",\r\n                    }}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    style={{\r\n                      height: \"50px\",\r\n                      borderRadius: \"8px\",\r\n                      textTransform: \"none\",\r\n                    }}\r\n                    disabled={!checked}\r\n                  >\r\n                    Pay ${total}\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </FormProvider>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    total: state.formData.orderSum,\r\n    formSummary: state.formData,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setPaymentForm })(Payment)\r\n","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\Confirmation.js",["175"],"import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Preloader } from './../Helpers/Preloader';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Success } from '../../assets/icons';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport ReservationFailed from './ReservationFailed';\r\nimport { createReservation, logOut } from './../../Redux/form-reducer';\r\n\r\n\r\nconst Confirmation = ({ createReservation, companyName, email, setExpanded, isSuccess, isFetching, setActiveStep, formSummary, logOut }) => {\r\n\r\n\r\n    React.useEffect(() => {\r\n        createReservation(formSummary)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? <Preloader /> :\r\n                isSuccess ?\r\n                    <Grid container direction=\"column\" spacing={2} justify='center' alignItems='center' style={{ height: '80vh' }}>\r\n                        <Grid item>\r\n                            <Success />\r\n                        </Grid>\r\n                        {/* <Grid item>\r\n                            <Typography variant='body2'>Success</Typography>\r\n                        </Grid> */}\r\n                        <Grid item>\r\n                            <Typography variant='body2' align='center'>Your reservation was successfully <Typography variant='body2' >submitted. A confirmation email was</Typography> sent to {email && email}.</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant='body2'>Thanks, {companyName && companyName}</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button onClick={() => { setExpanded(false); setActiveStep(0); logOut() }} variant='contained' color='primary' fullWidth>Done</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    :\r\n                    <ReservationFailed setActiveStep={setActiveStep} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isSuccess: state.companyProfile.isSuccess,\r\n        isFetching: state.cars.isFetching,\r\n        formSummary: state.formData,\r\n        email: state.formData.client.email,\r\n        companyName: state.companyProfile.profile.companyName\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { createReservation, logOut })(Confirmation);\r\n","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\ReservationFailed.js",[],"C:\\Emir's folder\\widget\\src\\Components\\GoogleMap\\Directions.js",[],"C:\\Emir's folder\\widget\\src\\Components\\TermsOfUse\\TermOfUse.js",["176","177","178"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { termsApi } from '../../api/api';\r\n\r\nexport default function TermsOfUse() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [term, setTerm] = React.useState('')\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    React.useEffect(() => {\r\n        let componentMounted = true;\r\n        if (open) {\r\n            const fetchTerms = async () => {\r\n                const data = await termsApi.getTermOfUse();\r\n                if (componentMounted) {\r\n                    setTerm(data)\r\n                }\r\n                fetchTerms();\r\n            }\r\n        }\r\n        return () => {\r\n            componentMounted = false;\r\n        }\r\n    }, [])\r\n\r\n    let descriptionElementRef = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handleClickOpen} disableRipple\r\n                style={{ height: '50px', textTransform: 'none', padding: 0, backgroundColor: 'transparent' }}>Terms</Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">Terms Of Use</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText\r\n                        id=\"scroll-dialog-description\"\r\n                        ref={descriptionElementRef}\r\n                        tabIndex={-1}\r\n                    >\r\n                        1. General.\r\n                        The Stripe Checkout service (“Stripe Checkout”) is technology that makes it easier for merchants on the Internet (“Merchants”) to collect payment from individuals like you. Stripe Checkout also makes it easy for you to store payment credentials, like credit cards and debit cards (“Payment Credentials”) with Stripe for use with Merchants who have chosen to use Stripe as their payment processor.\r\n\r\n                        2. Using Stripe Checkout.\r\n                        When you check out on the website of a Merchant that has Stripe Checkout enabled, we will ask you if you’d like us to remember you. When you allow us to remember you, Stripe will store certain identifying information, such as your email address and your mobile phone number (“Stripe Credentials”), and your Payment Credentials. Information stored as part of your Payment Credentials may include information such as your name, the account number and the expiration date, as well as associated information like your billing address and shipping address. The advantage of remembering you is that it will make your checkout quicker and easier if you come back to the same website, or to any of the other Merchants that use Stripe (a “Stripe Enabled Merchant”) – this can be especially handy when you’re on a mobile device or don’t have your credit card in front of you.\r\n\r\n                        If you elect to allow us to remember you, Stripe will use cookies to link your web browser to your Stripe Credentials and recognize when you visit a Stripe Enabled Merchant. If you come to a Stripe Enabled Merchant and we don’t recognize you (for example, because you’ve cleared your cookies, logged out, or you’re using a different device), we will provide a way for you to identify yourself and login via your Stripe Credentials (for example, by sending you a verification code via SMS text message). While you are logged in, Stripe will give you the ability to make purchases using your stored Payment Credentials. Stripe may also allow you to make a purchase with your Payment Credentials by sending a message directly from the email address or phone number stored as your Stripe Credentials (for example, to authorize a purchase via SMS).\r\n\r\n                        If you send us text messages, or have us send you one, don’t forget that your carrier might charge you for that. For more information on how we use cookies, please view our Cookie Policy.\r\n\r\n                        3. Stripe’s Role.\r\n                        Stripe Checkout enables you to store your Payment Credentials, but it doesn’t change anything else about your relationship with the Merchant you’re paying or your bank or credit card company. Stripe will, however, use reasonable efforts to keep your Payment Credentials secure.\r\n\r\n                        You are ultimately responsible for the purchases you make using Stripe Checkout. Also, the Merchant is the one responsible for providing you the goods or services that you purchase using Stripe Checkout, not Stripe. Stripe Checkout may display, or link to, the terms and policies that attach to a product or service sold by a Stripe Enabled Merchant. For example, Stripe Checkout may display, or link to, a Merchant’s policies with respect to returns, refunds, and exchanges. The content of any such policies is chosen by the Merchant, and Stripe does not control, or have any responsibility for, the Merchant’s compliance with the content of its policies and terms. If you believe that a Merchant has failed to comply with its terms or policies, or any other obligation imposed by applicable law, please contact the Merchant directly.\r\n\r\n                        4. Your Location; Making Changes.\r\n                        When you allow us to remember you, we will assume that you are located in the country of your billing address, if one is provided, and otherwise the country of your phone number. If this country is incorrect, or you move countries, and you wish to continue to store your Payment Credentials with us, then you must contact us for instructions on how to delete your stored information, and create a new account that is associated with the correct country.\r\n\r\n                        If you want to delete your Payment Credentials, stop storing information using Stripe Checkout, or change your settings, please contact us.\r\n\r\n                        5. Representations and Warranties.\r\n                        By using Stripe Checkout you confirm that you are at least 18 years of age and that you will not use Stripe Checkout for any fraudulent, unlawful or abusive purpose.\r\n\r\n                        6. Disclaimers.\r\n                        Stripe Checkout, including all content, software, functions, materials, and information made available on, provided in connection with or accessible through Stripe Checkout, are provided “as is.” To the fullest extent permissible by law, Stripe), make no representation or warranty of any kind whatsoever for the services or the content, materials, information and functions made accessible by Stripe Checkout, or for any breach of security associated with the transmission of sensitive information through Stripe Checkout. To the fullest extent permissible by law, Stripe disclaims any warranty of any kind with respect to the services, noninfringement, merchantability, or being fit for a particular purpose. Stripe does not warrant that the functions contained in the services will be uninterrupted or error free. Stripe shall not be responsible for any service interruptions, including, but not limited to, system failures or other interruptions that may affect the receipt, processing, acceptance, completion or settlement of payment transactions, unless such service interruption has been caused by Stripe.\r\n\r\n                        7. Limitations of Liability; Force Majeure.\r\n                        We do not exclude or limit in any way our liability to you where it would be unlawful to do so. This includes liability for death or personal injury caused by our negligence or the negligence of our employees, agents or representatives; for fraud or fraudulent misrepresentation. Nothing in this section or these terms will affect your statutory rights as a consumer.\r\n\r\n                        Except under the circumstances stated above, in no event shall Stripe be responsible or liable to you or any third party under any circumstances for any indirect, consequential, special, punitive or exemplary, damages or losses, including but not limited to damages for loss of profits, goodwill, use, data, or other intangible losses which may be incurred in connection with Stripe or the services, or any goods, services, or information purchased, received, sold, or paid for by way of the services.\r\n\r\n                        In addition to and without limiting any of the foregoing, Stripe shall not have any liability for any failure or delay resulting from any condition beyond the reasonable control of itself, including but not limited to governmental action or acts of terrorism, earthquake, fire, flood or other acts of God, strikes or other industrial action, power failures and Internet outages.\r\n\r\n                        8. Governing Law.\r\n                        This Agreement is concluded in English.\r\n\r\n                        This Agreement and any dispute or claim arising out of or in connection with it or its subject matter or formation (including non-contractual disputes or claims) (a “Dispute”) will be governed by and construed in accordance with the laws of the Republic of Ireland. Any Dispute shall be finally resolved by the courts competent to adjudicate the Dispute.\r\n\r\n                        This section is without prejudice to any overriding rights which you may be entitled to in your country of residence. If you are a consumer then the courts of your country of residence may have jurisdiction to hear any dispute that may arise out of or is related to this Agreement.\r\n\r\n                        If you are located in the European Union, we hereby provide you, in accordance with Article 14 of EU Regulation 524/2013, with an electronic link to the Online Dispute Resolution (“ODR”) platform of the European Union. For the purposes of the same EU Regulation, we confirm that you can contact us through the following email address: notices@stripe.com, and that we do not intend to use the platform.\r\n\r\n                        9. Modification of Terms of Service; Notices.\r\n                        We have the right to change or add to these Terms of Service at any time, solely with prospective effect, and to change, delete, discontinue, or impose conditions on use of Stripe Checkout by posting such changes on our website . We may provide you with notice via email, postings on our website, or through other reasonable means. If you are an existing Stripe Checkout user, the changes will come into effect 10 days after we post the changes to our website, and your use of Stripe Checkout more than 10 days after we publish any such changes on our website, constitutes your acceptance of the modified Terms of Service. In the event that you do not agree with any such modification, your sole and exclusive remedy is to terminate your use of Stripe Checkout. You can access a copy of the current terms of these Terms of Service on our website at any time. You can find out when these Terms of Service were last changed by checking the “Last updated” date at the top of these Terms of Service.\r\n\r\n                        10. Assignment.\r\n                        You may not assign these Terms of Service or any rights or obligations hereunder without our prior written approval and any such attempted assignment shall be void. We may assign these Terms of Service and the rights and obligations hereunder, to any third party. Unless you terminate your use of Stripe Checkout, which you or your successor may do at any time, these Terms of Service shall be binding upon and inure to the benefit of Stripe and your successor.\r\n\r\n                        11. Data.\r\n                        By using Stripe Checkout, you agree to the Stripe Privacy Policy, which is incorporated into and forms part of these Terms of Service. You should be aware that your data may be transferred, processed and stored outside of your country (including, if you are located in the European Union, outside of the European Union), and that your data may be subject to disclosure as required by applicable law.\r\n\r\n                        Stripe has implemented reCAPTCHA on Stripe Checkout. Use of reCAPTCHA is subject to the Google Privacy Policy and Terms of Service.\r\n\r\n                        12. Survival.\r\n                        You may terminate your use of Stripe Checkout at any time by ceasing to make purchases from merchants that use Stripe Checkout. Upon termination of your use of Stripe Checkout or termination of these Terms of Service for any reason, in addition to this section, the following sections shall survive termination: Sections 5 through to 13 (inclusive).\r\n\r\n                        13. Miscellaneous.\r\n                        Stripe’s failure to exercise or enforce any right or provision of the Terms of Service will not be considered a waiver of that right or provision. If any provision of these Terms of Service shall be adjudged by any court of competent jurisdiction to be unenforceable or invalid, that provision shall be limited or eliminated to the minimum extent necessary so that these Terms of Service shall otherwise remain in full force and effect and remain enforceable between the parties. Headings are for reference purposes only and in no way define, limit, construe or describe the scope or extent of such section. These Terms of Service, including Stripe’s policies applicable to Stripe Checkout at referenced above, constitutes the entire agreement between you and Stripe with respect to the use of Stripe Checkout. These Terms of Service are not intended and shall not be construed to create any rights or remedies in any parties other than you and Stripe, and no other person will have the ability to assert any rights as a third party beneficiary under these Terms of Service. These Terms of Service do not limit any rights that Stripe may have under trade secret, copyright, patent or other laws.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}","C:\\Emir's folder\\widget\\src\\Components\\TermsOfUse\\PrivacyPolicy.js",["179","180"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { termsApi } from '../../api/api';\r\n\r\nexport default function PrivacyPolicy() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [privacyPolicy, setPrivacyPolicy] = React.useState('')\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    React.useEffect(() => {\r\n        let componentMounted = true;\r\n        const fetchPrivacyPolicy = async () => {\r\n            const data = await termsApi.getPrivacyPolicy();\r\n            if (componentMounted) {\r\n                setPrivacyPolicy(data)\r\n            }\r\n            fetchPrivacyPolicy()\r\n        }\r\n        return () => {\r\n            componentMounted = false;\r\n        }\r\n    }, [])\r\n\r\n\r\n    const descriptionElementRef = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handleClickOpen} disableRipple\r\n                style={{ height: '50px', textTransform: 'none', padding: 0, backgroundColor: 'transparent' }}>Privacy Policy</Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">Privacy Policy</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText\r\n                        id=\"scroll-dialog-description\"\r\n                        ref={descriptionElementRef}\r\n                        tabIndex={-1}\r\n                    >\r\n                        Ipsum eu magna pariatur ex eiusmod ullamco excepteur cillum culpa cupidatat labore minim culpa. In exercitation voluptate nostrud aute sunt excepteur est fugiat. Quis excepteur elit aute cupidatat. Adipisicing elit nulla eu eu qui consequat eu exercitation. Sunt ipsum cupidatat sit occaecat cupidatat tempor et elit id id amet esse labore. Duis est velit veniam cupidatat cillum sint eu voluptate aliqua nostrud minim sit.\r\n\r\n                        Consequat laboris amet laboris amet laboris duis. Eiusmod adipisicing amet et amet deserunt mollit pariatur excepteur magna eu enim elit reprehenderit. Ex ut ex non aliqua nisi sint voluptate nisi laboris adipisicing excepteur aliqua tempor. Minim irure laboris sint voluptate aliqua proident deserunt quis id nulla nostrud ad. Ipsum sit anim ad nulla incididunt. Nostrud est reprehenderit consequat do.\r\n\r\n                        Et fugiat minim Lorem velit do ullamco duis incididunt laboris mollit nisi sint mollit elit. Aute fugiat sunt aliquip quis dolore. Excepteur amet consectetur labore do duis enim laboris mollit anim veniam. Magna eiusmod est laboris nisi id ullamco officia incididunt nulla. Aliquip nisi est adipisicing dolor culpa proident irure. Et esse aliqua elit exercitation mollit aliquip ipsum consequat sunt sit magna aliqua cupidatat anim.\r\n\r\n                        Esse id velit mollit ut aliqua culpa ipsum sit. Est do elit laborum proident sit. Quis id eiusmod consequat ullamco ipsum pariatur aliqua aliqua nulla enim voluptate. Consequat minim esse ut elit voluptate deserunt aute incididunt esse laborum enim ullamco. Et adipisicing enim culpa dolor duis cillum.\r\n\r\n                        Quis minim deserunt quis eu. Voluptate et cillum fugiat non Lorem qui quis nisi et deserunt. Est adipisicing ex eiusmod anim proident ipsum esse. Magna in reprehenderit eu cupidatat ullamco dolor Lorem Lorem excepteur magna Lorem enim anim laboris. Elit consequat cillum culpa pariatur. Proident esse elit aliquip cupidatat fugiat aute nisi ipsum elit ut occaecat est non Lorem.\r\n\r\n                        Lorem reprehenderit officia minim mollit dolore. Eiusmod ad tempor pariatur est sunt exercitation aliqua ad mollit. Elit aliqua excepteur commodo eiusmod. Occaecat magna labore mollit aliquip commodo est Lorem Lorem reprehenderit cillum. Exercitation ipsum ut aliquip aliqua. Voluptate do dolore culpa qui excepteur veniam commodo est mollit ea consectetur non. Et nulla deserunt eu officia ex ad cupidatat.\r\n\r\n                        Laboris duis consequat id sunt nisi aliqua ad. Ipsum sit ad amet laboris mollit duis irure. Commodo laborum non quis enim dolore. Ipsum aliqua eu nisi reprehenderit voluptate exercitation tempor.\r\n\r\n                        Ipsum qui reprehenderit aliqua irure. Nulla ut laborum aliqua qui velit proident velit dolor non aliquip sit officia culpa. Ipsum ullamco et laborum commodo ut. Est eu tempor ex incididunt dolore id laborum ea fugiat nostrud sunt consectetur. Ad officia ipsum fugiat sunt ipsum ipsum culpa nisi adipisicing. Laborum ullamco Lorem fugiat cupidatat ipsum aliquip ea consequat. Non cupidatat dolore duis veniam eu sint duis excepteur deserunt eiusmod.\r\n\r\n                        Tempor eu amet cillum esse magna mollit laborum cillum laboris non fugiat. Esse cillum velit laborum minim non quis nostrud. Sunt culpa elit cupidatat dolor aute labore esse. Anim ex occaecat sint aliquip laborum laboris nostrud exercitation amet cupidatat nostrud minim. Nostrud est Lorem in Lorem ea proident esse culpa. Eiusmod eiusmod esse irure irure officia ex elit in. Ea voluptate voluptate in enim adipisicing proident amet qui ad duis tempor ut magna incididunt.\r\n\r\n                        Voluptate veniam excepteur mollit eu quis velit occaecat enim qui laborum cillum incididunt esse. Dolor enim occaecat non adipisicing excepteur Lorem incididunt reprehenderit aliquip mollit aliquip sit incididunt. Aute velit culpa fugiat eu sint ea nisi cillum cillum et aliquip. Officia aliquip incididunt officia sit labore anim consequat magna officia id. Ex aliquip fugiat eiusmod enim dolore anim enim qui.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}","C:\\Emir's folder\\widget\\src\\Components\\GoogleMap\\mapStyles.js",["181"],"export default [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": 36\r\n            },\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 16\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 20\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 17\r\n            },\r\n            {\r\n                \"weight\": 1.2\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 20\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 21\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 17\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 29\r\n            },\r\n            {\r\n                \"weight\": 0.2\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 18\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 16\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 19\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#000000\"\r\n            },\r\n            {\r\n                \"lightness\": 17\r\n            }\r\n        ]\r\n    }\r\n]","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\CustomFormInput.js",["182","183","184","185"],"import { makeStyles } from \"@material-ui/core\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\r\nimport {\r\n  DatePicker,\r\n  DateTimePicker,\r\n  TimePicker,\r\n  KeyboardTimePicker,\r\n} from \"@material-ui/pickers\"\r\nimport \"date-fns\"\r\nimport React from \"react\"\r\nimport { Controller, useFormContext } from \"react-hook-form\"\r\nimport InputMask from \"react-input-mask\"\r\nimport { PlacesAutocomplete } from \"react-places-autocomplete\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputRoot: {\r\n    height: \"40px\",\r\n    background: \"#282836\",\r\n  },\r\n  noBorder: {\r\n    border: \"none\",\r\n  },\r\n  // input: {\r\n  //   height: \"40px\",\r\n  // },\r\n}))\r\n\r\nexport const CustomFormInput = ({ defaultValue, name, required, ...props }) => {\r\n  const { control } = useFormContext()\r\n\r\n  return (\r\n    <Controller\r\n      as={TextField}\r\n      control={control}\r\n      name={name}\r\n      required={required}\r\n      defaultValue={defaultValue}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const CustomFormInputForPayment = ({\r\n  defaultValue,\r\n  name,\r\n  required,\r\n  ...props\r\n}) => {\r\n  const { control } = useFormContext()\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Controller\r\n      as={TextField}\r\n      control={control}\r\n      name={name}\r\n      required={required}\r\n      defaultValue={defaultValue}\r\n      InputProps={{\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          notchedOutline: classes.noBorder,\r\n        },\r\n      }}\r\n      style={{ height: \"40px\" }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const FormInput = ({ defaultValue, name, required, ...props }) => {\r\n  const { control } = useFormContext()\r\n\r\n  return (\r\n    <Controller\r\n      as={TextField}\r\n      control={control}\r\n      name={name}\r\n      required={required}\r\n      defaultValue={defaultValue}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const CustomMaskInput = ({\r\n  defaultValue,\r\n  name,\r\n  required,\r\n  mask,\r\n  ...props\r\n}) => {\r\n  const { control } = useFormContext()\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Controller\r\n      as={InputMask}\r\n      control={control}\r\n      name={name}\r\n      required={required}\r\n      mask={mask}\r\n      defaultValue={defaultValue}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const CustomAutocomplete = ({\r\n  defaultValue,\r\n  name,\r\n  required,\r\n  ...props\r\n}) => {\r\n  const { control } = useFormContext()\r\n\r\n  return (\r\n    <Controller\r\n      as={PlacesAutocomplete}\r\n      control={control}\r\n      name={name}\r\n      required={required}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const DateInputControl = ({ name, required, ...props }) => {\r\n  const { control } = useFormContext()\r\n\r\n  return (\r\n    <Controller\r\n      as={DatePicker}\r\n      name={name}\r\n      required={required}\r\n      style={{ cursor: \"pointer\" }}\r\n      {...props}\r\n      control={control}\r\n    ></Controller>\r\n  )\r\n}\r\nexport const TimeInputControl = ({ name, required, ...props }) => {\r\n  const { control } = useFormContext()\r\n\r\n  return (\r\n    <Controller\r\n      as={TimePicker}\r\n      name={name}\r\n      required={required}\r\n      style={{ cursor: \"pointer\" }}\r\n      {...props}\r\n      control={control}\r\n    ></Controller>\r\n  )\r\n}\r\n","C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\PassengerQuantity.js",["186"],"C:\\Emir's folder\\widget\\src\\Components\\CheckoutForm\\CheckOut\\Hours.js",["187"],"import Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport React, { useState } from \"react\"\r\nimport { useFormContext } from \"react-hook-form\"\r\nimport { MinusIcon, PlusIcon } from \"../../../assets/icons\"\r\n\r\nconst Hours = ({ hoursState, setHourly }) => {\r\n  const { register } = useFormContext()\r\n\r\n  const [value, setValue] = useState(0)\r\n\r\n  const onDecrease = () => {\r\n    if (value === 0) {\r\n      return\r\n    }\r\n    setValue((value) => value - 1)\r\n  }\r\n  const onIncrease = () => {\r\n    setValue((value) => value + 1)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (hoursState !== 0) {\r\n      setHourly(true)\r\n      setValue(parseInt(hoursState))\r\n    }\r\n  }, [hoursState])\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justify=\"space-between\"\r\n      alignItems=\"center\"\r\n      style={{ marginTop: \"-10px\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography\r\n          style={{ color: \"white\", marginLeft: \"12px\", fontSize: \"16px\" }}\r\n        >\r\n          Hours\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-around\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <span onClick={onDecrease}>\r\n              <MinusIcon />\r\n            </span>\r\n          </Grid>\r\n          <Grid item style={{ textAlign: \"center\" }}>\r\n            <input\r\n              ref={register}\r\n              name=\"hours\"\r\n              onChange={(e) => {\r\n                setValue(e.target.value)\r\n              }}\r\n              value={value}\r\n              size=\"1\"\r\n              style={{\r\n                // pointerEvents: \"none\",\r\n                marginRight: \"3px\",\r\n                backgroundColor: \"transparent\",\r\n                border: \"none\",\r\n                color: \"#FFFFFF\",\r\n                textAlign: \"center\",\r\n                fontFamily: \"Roboto\",\r\n                textTransform: \"none\",\r\n                fontWeight: \"400\",\r\n                fontSize: \"16px\",\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <span onClick={onIncrease}>\r\n              <PlusIcon />\r\n            </span>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Hours\r\n","C:\\Emir's folder\\widget\\src\\Components\\GoogleMap\\GoogleMap.js",["188","189","190","191","192"],{"ruleId":"193","severity":1,"message":"194","line":7,"column":8,"nodeType":"195","messageId":"196","endLine":7,"endColumn":14},{"ruleId":"193","severity":1,"message":"197","line":8,"column":8,"nodeType":"195","messageId":"196","endLine":8,"endColumn":14},{"ruleId":"193","severity":1,"message":"198","line":19,"column":3,"nodeType":"195","messageId":"196","endLine":19,"endColumn":15},{"ruleId":"193","severity":1,"message":"199","line":23,"column":10,"nodeType":"195","messageId":"196","endLine":23,"endColumn":19},{"ruleId":"193","severity":1,"message":"200","line":39,"column":10,"nodeType":"195","messageId":"196","endLine":39,"endColumn":24},{"ruleId":"193","severity":1,"message":"201","line":39,"column":26,"nodeType":"195","messageId":"196","endLine":39,"endColumn":43},{"ruleId":"193","severity":1,"message":"202","line":40,"column":10,"nodeType":"195","messageId":"196","endLine":40,"endColumn":14},{"ruleId":"193","severity":1,"message":"203","line":46,"column":9,"nodeType":"195","messageId":"196","endLine":46,"endColumn":24},{"ruleId":"193","severity":1,"message":"204","line":50,"column":9,"nodeType":"195","messageId":"196","endLine":50,"endColumn":26},{"ruleId":"205","severity":1,"message":"206","line":75,"column":5,"nodeType":"207","messageId":"208","endLine":77,"endColumn":6},{"ruleId":"205","severity":1,"message":"206","line":94,"column":5,"nodeType":"207","messageId":"208","endLine":96,"endColumn":6},{"ruleId":"209","severity":1,"message":"210","line":134,"column":6,"nodeType":"211","endLine":134,"endColumn":16,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"213","line":136,"column":9,"nodeType":"195","messageId":"196","endLine":136,"endColumn":19},{"ruleId":"214","severity":1,"message":"215","line":173,"column":23,"nodeType":"216","messageId":"217","endLine":177,"endColumn":24},{"ruleId":"214","severity":1,"message":"215","line":260,"column":27,"nodeType":"216","messageId":"217","endLine":264,"endColumn":28},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"193","severity":1,"message":"222","line":2,"column":8,"nodeType":"195","messageId":"196","endLine":2,"endColumn":13},{"ruleId":"193","severity":1,"message":"223","line":2,"column":17,"nodeType":"195","messageId":"196","endLine":2,"endColumn":25},{"ruleId":"193","severity":1,"message":"224","line":11,"column":7,"nodeType":"195","messageId":"196","endLine":11,"endColumn":17},{"ruleId":"193","severity":1,"message":"223","line":2,"column":10,"nodeType":"195","messageId":"196","endLine":2,"endColumn":18},{"ruleId":"193","severity":1,"message":"225","line":11,"column":7,"nodeType":"195","messageId":"196","endLine":11,"endColumn":21},{"ruleId":"193","severity":1,"message":"226","line":12,"column":7,"nodeType":"195","messageId":"196","endLine":12,"endColumn":21},{"ruleId":"193","severity":1,"message":"227","line":9,"column":10,"nodeType":"195","messageId":"196","endLine":9,"endColumn":18},{"ruleId":"193","severity":1,"message":"199","line":10,"column":10,"nodeType":"195","messageId":"196","endLine":10,"endColumn":19},{"ruleId":"193","severity":1,"message":"228","line":11,"column":8,"nodeType":"195","messageId":"196","endLine":11,"endColumn":14},{"ruleId":"193","severity":1,"message":"229","line":9,"column":10,"nodeType":"195","messageId":"196","endLine":9,"endColumn":21},{"ruleId":"193","severity":1,"message":"230","line":32,"column":3,"nodeType":"195","messageId":"196","endLine":32,"endColumn":19},{"ruleId":"193","severity":1,"message":"231","line":48,"column":8,"nodeType":"195","messageId":"196","endLine":48,"endColumn":12},{"ruleId":"193","severity":1,"message":"232","line":227,"column":7,"nodeType":"195","messageId":"196","endLine":227,"endColumn":13},{"ruleId":"205","severity":1,"message":"233","line":233,"column":1,"nodeType":"207","messageId":"234","endLine":235,"endColumn":2},{"ruleId":"193","severity":1,"message":"235","line":255,"column":24,"nodeType":"195","messageId":"196","endLine":255,"endColumn":40},{"ruleId":"193","severity":1,"message":"236","line":256,"column":24,"nodeType":"195","messageId":"196","endLine":256,"endColumn":40},{"ruleId":"193","severity":1,"message":"237","line":295,"column":11,"nodeType":"195","messageId":"196","endLine":295,"endColumn":17},{"ruleId":"193","severity":1,"message":"238","line":297,"column":11,"nodeType":"195","messageId":"196","endLine":297,"endColumn":18},{"ruleId":"193","severity":1,"message":"239","line":4,"column":8,"nodeType":"195","messageId":"196","endLine":4,"endColumn":13},{"ruleId":"193","severity":1,"message":"199","line":13,"column":10,"nodeType":"195","messageId":"196","endLine":13,"endColumn":19},{"ruleId":"214","severity":1,"message":"215","line":345,"column":29,"nodeType":"216","messageId":"217","endLine":345,"endColumn":52},{"ruleId":"214","severity":1,"message":"215","line":386,"column":29,"nodeType":"216","messageId":"217","endLine":386,"endColumn":52},{"ruleId":"193","severity":1,"message":"239","line":6,"column":8,"nodeType":"195","messageId":"196","endLine":6,"endColumn":13},{"ruleId":"193","severity":1,"message":"240","line":14,"column":10,"nodeType":"195","messageId":"196","endLine":14,"endColumn":26},{"ruleId":"193","severity":1,"message":"241","line":75,"column":9,"nodeType":"195","messageId":"196","endLine":75,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":185,"column":23,"nodeType":"216","messageId":"217","endLine":185,"endColumn":46},{"ruleId":"214","severity":1,"message":"215","line":226,"column":23,"nodeType":"216","messageId":"217","endLine":226,"endColumn":46},{"ruleId":"193","severity":1,"message":"242","line":5,"column":3,"nodeType":"195","messageId":"196","endLine":5,"endColumn":18},{"ruleId":"209","severity":1,"message":"243","line":17,"column":8,"nodeType":"211","endLine":17,"endColumn":10,"suggestions":"244"},{"ruleId":"193","severity":1,"message":"245","line":12,"column":12,"nodeType":"195","messageId":"196","endLine":12,"endColumn":16},{"ruleId":"193","severity":1,"message":"246","line":26,"column":19,"nodeType":"195","messageId":"196","endLine":26,"endColumn":29},{"ruleId":"209","severity":1,"message":"247","line":37,"column":8,"nodeType":"211","endLine":37,"endColumn":10,"suggestions":"248"},{"ruleId":"193","severity":1,"message":"249","line":12,"column":12,"nodeType":"195","messageId":"196","endLine":12,"endColumn":25},{"ruleId":"193","severity":1,"message":"250","line":25,"column":15,"nodeType":"195","messageId":"196","endLine":25,"endColumn":33},{"ruleId":"251","severity":1,"message":"252","line":1,"column":1,"nodeType":"253","endLine":167,"endColumn":2},{"ruleId":"193","severity":1,"message":"254","line":3,"column":8,"nodeType":"195","messageId":"196","endLine":3,"endColumn":20},{"ruleId":"193","severity":1,"message":"255","line":6,"column":3,"nodeType":"195","messageId":"196","endLine":6,"endColumn":17},{"ruleId":"193","severity":1,"message":"256","line":8,"column":3,"nodeType":"195","messageId":"196","endLine":8,"endColumn":21},{"ruleId":"193","severity":1,"message":"257","line":95,"column":9,"nodeType":"195","messageId":"196","endLine":95,"endColumn":16},{"ruleId":"193","severity":1,"message":"258","line":7,"column":3,"nodeType":"195","messageId":"196","endLine":7,"endColumn":21},{"ruleId":"209","severity":1,"message":"259","line":27,"column":6,"nodeType":"211","endLine":27,"endColumn":18,"suggestions":"260"},{"ruleId":"193","severity":1,"message":"261","line":5,"column":10,"nodeType":"195","messageId":"196","endLine":5,"endColumn":17},{"ruleId":"193","severity":1,"message":"262","line":5,"column":19,"nodeType":"195","messageId":"196","endLine":5,"endColumn":33},{"ruleId":"193","severity":1,"message":"263","line":19,"column":8,"nodeType":"195","messageId":"196","endLine":19,"endColumn":28},{"ruleId":"193","severity":1,"message":"264","line":98,"column":13,"nodeType":"195","messageId":"196","endLine":98,"endColumn":26},{"ruleId":"209","severity":1,"message":"265","line":164,"column":10,"nodeType":"211","endLine":164,"endColumn":31,"suggestions":"266"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Dialog' is defined but never used.","'initializing' is defined but never used.","'Preloader' is defined but never used.","'disabledWidget' is assigned a value but never used.","'setDisabledWidget' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'handleCloseDialog' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["267"],"'Transition' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-native-reassign",["268"],"no-negated-in-lhs",["269"],"'React' is defined but never used.","'useState' is defined but never used.","'palletType' is assigned a value but never used.","'SET_EXACT_DATE' is assigned a value but never used.","'SET_EXACT_TIME' is assigned a value but never used.","'isMobile' is defined but never used.","'AppBar' is defined but never used.","'yupResolver' is defined but never used.","'DataInputControl' is defined but never used.","'lime' is defined but never used.","'schema' is assigned a value but never used.","Block is redundant.","redundantBlock","'handleDateChange' is assigned a value but never used.","'handleTimeChange' is assigned a value but never used.","'forRes' is assigned a value but never used.","'forRes2' is assigned a value but never used.","'Paper' is defined but never used.","'toggleIsFetching' is defined but never used.","'isMobile' is assigned a value but never used.","'CustomFormInput' is defined but never used.","React Hook React.useEffect has missing dependencies: 'createReservation' and 'formSummary'. Either include them or remove the dependency array. If 'createReservation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["270"],"'term' is assigned a value but never used.","'fetchTerms' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.",["271"],"'privacyPolicy' is assigned a value but never used.","'fetchPrivacyPolicy' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'classes' is assigned a value but never used.","'NumberOfPassengers' is defined but never used.","React Hook React.useEffect has a missing dependency: 'setHourly'. Either include it or remove the dependency array. If 'setHourly' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["272"],"'useForm' is defined but never used.","'useFormContext' is defined but never used.","'rideCheckPointErrors' is defined but never used.","'handleChanger' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setDestinations'. Either include it or remove the dependency array. If 'setDestinations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["273"],{"desc":"274","fix":"275"},"no-global-assign","no-unsafe-negation",{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [jwtToken, props]",{"range":"284","text":"285"},"Update the dependencies array to be: [createReservation, formSummary]",{"range":"286","text":"287"},"Update the dependencies array to be: [open]",{"range":"288","text":"289"},"Update the dependencies array to be: [hoursState, setHourly]",{"range":"290","text":"291"},"Update the dependencies array to be: [orderAddressDetails, setDestinations]",{"range":"292","text":"293"},[4465,4475],"[jwtToken, props]",[669,671],"[createReservation, formSummary]",[1132,1134],"[open]",[704,716],"[hoursState, setHourly]",[4383,4404],"[orderAddressDetails, setDestinations]"]